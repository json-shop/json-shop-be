name: ci

on:
  push:
    branches: [ "ci-test2" ]
  pull_request:

permissions:
  checks: write
  pull-requests: write

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0.31
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: testdb
          MYSQL_USER: testuser
          MYSQL_PASSWORD: testpass
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10
      redis:
        image: redis:6
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout branch
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Create firebaseAccessKey.json
        run: |
          echo "${{ secrets.FIREBASE_KEY_BASE64 }}" | base64 -d > src/main/resources/firebaseAccessKey.json

      - name: Debug firebaseAccessKey.json
        run: |
          ls -al src/main/resources/
          cat src/main/resources/firebaseAccessKey.json || echo "firebaseAccessKey.json 없음"

      - name: Setup Gradle permission
        run: chmod +x ./gradlew

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Run Tests
        env:
          SPRING_DATASOURCE_URL: jdbc:mysql://127.0.0.1:3306/testdb
          SPRING_DATASOURCE_USERNAME: testuser
          SPRING_DATASOURCE_PASSWORD: testpass
          DB_URL: ${{ secrets.DB_URL }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          AWS_ACCESS_KEY: ${{secrets.AWS_ACCESS_KEY}}
          AWS_SECRET_KEY: ${{secrets.AWS_SECRET_KEY}}
          REGION: ${{secrets.REGION}}
          BUCKET_NAME: ${{secrets.BUCKET_NAME}}
          REDIS_PORT: ${{secrets.REDIS_PORT}}
          PORTONE_WEBHOOK_SECRET_KEY: ${{secrets.PORTONE_WEBHOOK_SECRET_KEY}}
          API_KEY: ${{secrets.API_KEY}}
        run: ./gradlew test

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          junit_files: '**/build/test-results/test/TEST-*.xml'

      - name: Add coverage comment to PR
        id: jacoco
        uses: madrapps/jacoco-report@v1.3
        with:
          paths: ${{ github.workspace }}/build/reports/jacoco/test/jacocoTestReport.xml
          token: ${{ secrets.GITHUB_TOKEN }}
          min-coverage-overall: 0
          min-coverage-changed-files: 0
          update-comment: true
          title: "현재 코드 커버리지 상황"

      - name: Move JaCoCo report
        run: |
          echo "Publishing JaCoCo report"
          mkdir -p report
          mv build/reports/jacoco/test/html/* report/

      - name: Upload JaCoCo report
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          path: report