#name: cd
#
#on:
#  #  push:
#  #    branches: [ "dev" ]
#  workflow_dispatch:
#
#jobs:
#  cd:
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v4
#
#      - name: Set up JDK 21
#        uses: actions/setup-java@v3
#        with:
#          distribution: 'temurin'
#          java-version: '21'
#
#      - name: Setup Gradle
#        uses: gradle/gradle-build-action@v2
#
#      - name: Setup gradlew permission
#        run: chmod +x gradlew
#
#      - name: Build bootJar
#        run: ./gradlew bootJar
#
#      - name: Login to GHCR
#        uses: docker/login-action@v2
#        with:
#          registry: ghcr.io
#          username: ${{ secrets.GHCR_USERNAME }}
#          password: ${{ secrets.GHCR_TOKEN }}
#
#      - name: Build & Push Docker image
#        run: |
#          SHORT_SHA=$(git rev-parse --short HEAD)
#          docker build -t ${{ secrets.DOCKER_REPO }}:$SHORT_SHA .
#          docker tag ${{ secrets.DOCKER_REPO }}:$SHORT_SHA ${{ secrets.DOCKER_REPO }}:latest
#          docker push ${{ secrets.DOCKER_REPO }}:$SHORT_SHA
#          docker push ${{ secrets.DOCKER_REPO }}:latest
#
#      - name: Generate .env
#        run: |
#          echo "SPRING_PROFILES_ACTIVE=prod" >> .env
#          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
#          echo "DB_URL=${{ secrets.DB_URL }}" >> .env
#          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
#          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
#          echo "REDIS_HOST=${{ secrets.REDIS_HOST }}" >> .env
#          echo "REDIS_PORT=${{ secrets.REDIS_PORT }}" >> .env
#          echo "AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}" >> .env
#          echo "AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}" >> .env
#          echo "REGION=${{ secrets.REGION }}" >> .env
#          echo "BUCKET_NAME=${{ secrets.BUCKET_NAME }}" >> .env
#          echo "TOSSPAYMENTS_API_BASE=${{ secrets.TOSSPAYMENTS_API_BASE }}" >> .env
#          echo "TOSSPAYMENTS_API_SECRET=${{ secrets.TOSSPAYMENTS_API_SECRET }}" >> .env
#
#
#
#      - name: Check files exist before SCP
#        run: ls -al
#
#      - name: Upload docker-compose & .env to EC2
#        uses: appleboy/scp-action@master
#        with:
#          host: ${{ secrets.EC2_HOST }}
#          username: ${{ secrets.EC2_USERNAME }}
#          key: ${{ secrets.EC2_SSH_KEY }}
#          source: "./docker-compose.yml,./.env"
#          target: "~/app"
#          overwrite: true
#
#      - name: Deploy on EC2
#        uses: appleboy/ssh-action@master
#        with:
#          host: ${{ secrets.EC2_HOST }}
#          username: ${{ secrets.EC2_USERNAME }}
#          key: ${{ secrets.EC2_SSH_KEY }}
#          script: |
#            cd ~/app
#            docker login ghcr.io -u ${{ secrets.GHCR_USERNAME }} -p ${{ secrets.GHCR_TOKEN }}
#            docker compose pull
#            docker compose up -d --no-deps app